/*
 * GLUT Shapes Demo
 *
 * Written by Nigel Stewart November 2003
 *
 * This program is test harness for the sphere, cone
 * and torus shapes in GLUT.
 *
 * Spinning wireframe and smooth shaded shapes are
 * displayed until the ESC or q key is pressed.  The
 * number of geometry stacks and slices can be adjusted
 * using the + and - keys.
 */

#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <stdlib.h>
#include<math.h>

float degree=0, deg=0,de=0,lim=0,x=0,i=0,ra=20,degree1=0, degree2=0,l=-2,r=-1.2,f=-10, sc=0.5,eyex=0,eyey=0,eyez=0,centerx=0,centery=0,centerz=-2,upx=0,upy=1,upz=0;
/* GLUT callback Handlers */

static void resize(int width, int height)
{
    const float ar = (float) width / (float) height;

    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glFrustum(-ar, ar, -1.0, 1.0, 2.0, 100.0);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity() ;
}
/*
void Triangle()
{
    glBegin(GL_TRIANGLES);
        glVertex3f(1.0,4.0,1.0);
        glVertex3f(0.0,0.0,2.0);
        glVertex3f(2.0,0.0,2.0);
    glEnd();
    glBegin(GL_TRIANGLES);
        glVertex3f(1.0,4.0,1.0);
        glVertex3f(0.0,0.0,0.0);
        glVertex3f(2.0,0.0,0.0);
    glEnd();
    glBegin(GL_TRIANGLES);
        glVertex3f(1.0,4.0,1.0);
        glVertex3f(2.0,0.0,2.0);
        glVertex3f(2.0,0.0,0.0);
    glEnd();
}*/
void OwnScalef(GLfloat x, GLfloat y, GLfloat z)
{
    GLfloat m[16];
    m[0]=x;
    m[1]=0;
    m[2]=0;
    m[3]=0;
    m[4]=0;
    m[5]=y;
    m[6]=0;
    m[7]=0;
    m[8]=0;
    m[9]=0;
    m[10]=z;
    m[11]=0;
    m[12]=0;
    m[13]=0;
    m[14]=0;
    m[15]=1;
    glMatrixMode(GL_MODELVIEW);
    glMultMatrixf(m);
}
void halfcircle()
{
    glBegin(GL_POLYGON);




    double r=.5,h=1;

    for(float x=-r; x<r; x+=0.010)
    {

        // theta = i*3.1416/180;
        glVertex3f(x,0,sqrt(r*r-x*x));
    }
    for(float x=r; x>-r; x-=0.010)
    {

        //theta = i*3.1416/180;
        glVertex3f(x,0,sqrt(r*r-x*x));
    }


    glVertex3f(-r,0,0);
    glEnd();
    /*glBegin(GL_POLYGON);



      int limit = 180;
      glColor3d(1,0,0);
      double theta,r=.5,h=1;

      for(int i=0;i<limit;i+=10)
      {

          theta = i*3.1416/180;
          glVertex3f(r* cos(theta),0,r* sin(theta));
      }
       for(int x=180;i>0;i-=10)
      {

          theta = i*3.1416/180;
          glVertex3f(r* cos(theta),0,r* sin(theta));
      }


      glVertex3f(-r,0,0);
    glEnd();*/
}
void cylinder()
{
    glBegin(GL_QUADS);
    int limit = 360;

    double x,r=.5,h=1;


    for(int i=limit; i>0;)
    {
        x = i*3.1416/180;
        glVertex3f(r*cos(x),h,r*sin(x));
        glVertex3f(r*cos(x),0,r*sin(x));
        i-=10;
        x = i*3.1416/180;
        glVertex3f(r*cos(x),0,r*sin(x));
        glVertex3f(r*cos(x),h,r*sin(x));
    }

    glEnd();
}

void cube()
{
    glBegin(GL_QUADS);
    glVertex3f(0.0,1.0,0.0);
    glVertex3f(1.0,1.0,1.0);
    glVertex3f(1.0,0.0,1.0);
    glVertex3f(1.0,0.0,0.0);

    glVertex3f(0.0,1.0,0.0);
    glVertex3f(0.0,1.0,1.0);
    glVertex3f(1.0,1.0,1.0);
    glVertex3f(1.0,1.0,0.0);

    glVertex3f(0.0,1.0,0.0);
    glVertex3f(1.0,1.0,0.0);
    glVertex3f(1.0,0.0,0.0);
    glVertex3f(0.0,0.0,0.0);

    glVertex3f(0.0,0.0,0.0);
    glVertex3f(1.0,0.0,0.0);
    glVertex3f(1.0,0.0,1.0);
    glVertex3f(0.0,0.0,1.0);

    glVertex3f(0.0,0.0,0.0);
    glVertex3f(0.0,0.0,1.0);
    glVertex3f(0.0,1.0,1.0);
    glVertex3f(0.0,1.0,0.0);

    glVertex3f(0.0,0.0,1.0);
    glVertex3f(1.0,0.0,1.0);
    glVertex3f(1.0,1.0,1.0);
    glVertex3f(0.0,1.0,1.0);

    glEnd();

}

void wings()
{
    //wings
    glPushMatrix();
    glTranslated(2.8,5.5,1.5);
    OwnScalef(4,0.01,.8);
    glColor3f(0.0,0,0.0);
    cube();

    glPopMatrix();
    glPushMatrix();
    glTranslated(4.5,5.5,-.2);
    OwnScalef(0.8,0.01,4);
    glColor3f(0.0,0,0.0);
    cube();
    glPopMatrix();
    //halfcircle in wings
    glPushMatrix();
    glTranslated(4.9,5.5,-.2);
    glScaled(0.8,0.01,-.8);
    glColor3f(.8,1,.8);
    halfcircle();
    glPopMatrix();
    glPushMatrix();
    glTranslated(4.9,5.5,3.79);
    glScaled(0.8,0.01,.8);
    glColor3f(0.8,.8,.8);
    halfcircle();
    glPopMatrix();
    glPushMatrix();
    glTranslated(2.8,5.5,1.9);
    glRotated(90,0,0,1);
    glRotated(90,0,1,0);
    glRotated(90,1,0,0);
    glScaled(0.8,0.01,-.8);
    glColor3f(0.8,1,0.8);
    halfcircle();
    glPopMatrix();
    glPushMatrix();
    glTranslated(6.8,5.5,1.9);
    glRotated(90,0,0,1);
    glRotated(90,0,1,0);
    glRotated(90,1,0,0);
    glScaled(0.8,0.01,.8);
    glColor3f(0.8,1,0.8);
    halfcircle();
    glPopMatrix();
}
void helicopter()
{
    /* glBegin(GL_TRIANGLES);
         glColor3d(0,0,1);

         glVertex3f(1.0,4.0,1.0);
         glVertex3f(0.0,0.0,2.0);
         glVertex3f(2.0,0.0,2.0);

         glColor3d(0,1,0);
         glVertex3f(1.0,4.0,1.0);
         glVertex3f(2.0,0.0,2.0);
         glVertex3f(2.0,0.0,0.0);

         glColor3d(1,0,0);
         glVertex3f(1.0,4.0,1.0);
         glVertex3f(2.0,0.0,0.0);
         glVertex3f(0.0,0.0,0.0);

         glColor3d(0,1,1);
         glVertex3f(1.0,4.0,1.0);
         glVertex3f(0.0,0.0,0.0);
         glVertex3f(0.0,0.0,2.0);

     glEnd();*/

    glBegin(GL_POLYGON);

    glColor3f(1,0.0,1);
    glVertex3f(0.0,0.0,0.0);
    glVertex3f(0.0,1.0,0.0);
    glVertex3f(4.0,4.0,0.0);
    glVertex3f(6.0,4.0,0.0);
    glVertex3f(6.0,0.0,0.0);
    glEnd();
    glBegin(GL_POLYGON);

    glColor3f(1,0,1);
    glVertex3f(0.0,0.0,0.0);
    glVertex3f(6.0,0.0,0.0);
    glVertex3f(6.0,4.0,0.0);
    glVertex3f(4.0,4.0,0.0);
    glVertex3f(0.0,1.0,0.0);



    glEnd();
    glBegin(GL_POLYGON);
    glColor3f(1,0,1);
    glVertex3f(0.0,0.0,4.0);
    glVertex3f(6.0,0.0,4.0);
    glVertex3f(6.0,4.0,4.0);
    glVertex3f(4.0,4.0,4.0);
    glVertex3f(0.0,1.0,4.0);

    glEnd();
    glBegin(GL_POLYGON);
    glColor3f(1,0,1);
    glVertex3f(0.0,0.0,4.0);
    glVertex3f(0.0,1.0,4.0);
    glVertex3f(4.0,4.0,4.0);
    glVertex3f(6.0,4.0,4.0);
    glVertex3f(6.0,0.0,4.0);



    glEnd();


    glPushMatrix();
    glTranslated(1,-1.21,0.0);
    glScaled(4,0.3,1);
    glColor3f(1,0,0);
    cube();
    glPopMatrix();
    //stand
    glPushMatrix();
    glTranslated(2.5,-1.2,.25);
    glScaled(1.2,1.201,.25);
    glColor3f(1,0,1);
    cube();
    glPopMatrix();
//lowerplane
    glPushMatrix();
    glTranslated(1,-1.21,3.25);
    glScaled(4,0.3,1);
    glColor3f(1,0,0);
    cube();
    glPopMatrix();
    //stand
    glPushMatrix();
    glTranslated(2.5,-1.2,3.75);
    glScaled(1.2,1.201,.25);
    glColor3f(1,0,1);
    cube();
    glPopMatrix();
//front curve
    glPushMatrix();
    glTranslated(2.05,2.38,4.0);
    glRotatef(38,0,0,1);
    glRotatef(-90,1,0,0);

    glScaled(5,1.0,1);
    glColor3f(1,0,1);
    halfcircle();
    glPopMatrix();

    glPushMatrix();
    glTranslated(2.05,2.38,0);
    glRotatef(38,0,0,1);
    glRotatef(-90,1,0,0);

    glScaled(5,1.0,1);
    glColor3f(1,0,1);
    halfcircle();
    glPopMatrix();

    glPushMatrix();
    glTranslated(.88,1.55,3.99);
    glRotatef(38,0,0,1);
    glRotatef(-90,1,0,0);

    glScalef(2.2,4.0,.5);
    glColor3f(0,1,1);
    cylinder();
    glPopMatrix();
//front
    glPushMatrix();
    glTranslated(-.01,0.0,0.0);
    glScaled(0.1,1.0,4);
    glColor3f(1,0,1);
    cube();
    glPopMatrix();


    glPushMatrix();
    glTranslated(0.0,1.0,0);
    glRotated(36.0,0,0,1);
    glScaled(2.1,0.01,3.99);
    glColor3f(0,1,1);
    cube();
    glPopMatrix();

    glPushMatrix();
    glTranslated(3.2,3.50,0);
    glRotated(25.0,0,0,1);
    glScaled(.98,0.01,3.99);
    glColor3f(0,1,1);
    cube();
    glPopMatrix();


    /*glBegin(GL_QUADS);
    glColor3d(1,0,1);
    glVertex3f(2.5,2.8,0.0);
    glVertex3f(0.0,1.0,0.0);
    glVertex3f(0.0,1.0,4.0);
    glVertex3f(2.5,2.8,4.0);

    glColor3d(1,0,1);
    glVertex3f(2.5,2.8,0.0);
    glVertex3f(2.5,2.8,4.0);
    glVertex3f(0.0,1.0,4.0);
    glVertex3f(0.0,1.0,0.0);

    glColor3d(1,0,1);
    glVertex3f(3.5,3.5,0.0);
    glVertex3f(3.5,3.5,4.0);
    glVertex3f(4.0,4.0,4.0);
    glVertex3f(4.0,4.0,0.0);
    glEnd();
    */
    //top
    glPushMatrix();
    glTranslated(4.0,4.0,4.0);
    OwnScalef(2,0.01,-4);
    glColor3f(0.8,0,0.8);
    cube();
    glPopMatrix();
    //back
    glPushMatrix();
    glTranslated(6.0,0.0,0.0);
    OwnScalef(0.01,4,4);
    glColor3f(1,0,1);
    cube();
    glPopMatrix();
    //tail
    glPushMatrix();
    glTranslated(6.01,1.3,1.5);
    OwnScalef(3.9,1.2,1);
    glColor3f(0.5,0.5,0);
    cube();
    glPopMatrix();
    //tail verticalcube
    glPushMatrix();
    glTranslated(9.9,1.5,1.8);
    glRotated(43.0,0,0,1);
    OwnScalef(3.05,1,.5);
    glColor3f(0.5,0.5,0);
    cube();
    glPopMatrix();

    //floor
    glPushMatrix();
    glTranslated(0.0,0.0,0);
    OwnScalef(6,0.01,4.00);
    glColor3f(1,1,0);
    cube();
    glPopMatrix();

    //wings
    glPushMatrix();
    glTranslated(4.9,4,1.9);
    glRotated(deg,0,1,0);
    glTranslated(-4.9,-4,-1.9);
    wings();
    glPopMatrix();

    //tailwings
    glPushMatrix();
    glScaled(.5,.5,.5);
    glTranslated(23.5,8,3.3);

    glRotated(90,1,0,0);
    glRotated(deg,0,1,0);
    glTranslated(-4.9,-4,-1.9);

    wings();
    glPopMatrix();

    //wings
    /*glPushMatrix();
    glTranslated(2.8,5.5,1.5);
    OwnScalef(4,0.01,.8);
    glColor3f(0.0,0,0.0);
    cube();

    glPopMatrix();
    glPushMatrix();
    glTranslated(4.5,5.5,-.2);
    OwnScalef(0.8,0.01,4);
    glColor3f(0.0,0,0.0);
    cube();
    glPopMatrix();
    //halfcircle in wings
    glPushMatrix();
    glTranslated(4.9,5.5,-.2);
    glScaled(0.8,0.01,-.8);
    glColor3f(.8,1,.8);
    halfcircle();
    glPopMatrix();
    glPushMatrix();
    glTranslated(4.9,5.5,3.79);
    glScaled(0.8,0.01,.8);
    glColor3f(0.8,.8,.8);
    halfcircle();
    glPopMatrix();
    glPushMatrix();
    glTranslated(2.8,5.5,1.9);
    glRotated(90,0,0,1);
    glRotated(90,0,1,0);
    glRotated(90,1,0,0);
    glScaled(0.8,0.01,-.8);
    glColor3f(0.8,1,0.8);
    halfcircle();
    glPopMatrix();
    glPushMatrix();
    glTranslated(6.8,5.5,1.9);
    glRotated(90,0,0,1);
    glRotated(90,0,1,0);
    glRotated(90,1,0,0);
    glScaled(0.8,0.01,.8);
    glColor3f(0.8,1,0.8);
    halfcircle();
    glPopMatrix();*/
//halfcircle in tail

    glPushMatrix();
    glTranslated(11.8,3.92,1.8);
    glRotated(90,0,0,1);
    glRotated(45,0,0,1);
    glRotated(90,1,0,0);
    glRotated(180,0,1,0);
    glScaled(1,.9,-.8);
    glColor3f(.2,.2,0);
    halfcircle();
    glPopMatrix();

    glPushMatrix();
    glTranslated(11.8,3.92,2.2);
    glRotated(90,0,0,1);
    glRotated(45,0,0,1);
    glRotated(90,1,0,0);
    glRotated(180,0,1,0);
    glScaled(1,.9,-.8);
    glColor3f(.2,.2,0);
    halfcircle();
    glPopMatrix();
//cylinder in tail
    glPushMatrix();
    glTranslated(11.78,3.94,1.8);
    glRotated(90,1,0,0);
    glScaled(1,.5,.85);
    glColor3f(.2,.2,0);
    cylinder();
    glPopMatrix();


//cylinder
    glPushMatrix();
    glTranslated(4.9,4,1.9);
    glScaled(0.5,1.5,0.5);
    glColor3f(0.2,0.2,0.2);
    cylinder();
    glPopMatrix();



    /* glBegin(GL_QUADS);
        glColor3d(0,1,1);
        glVertex3f(0.0,0.0,0.0);
        glVertex3f(6.0,0.0,0.0);
        glVertex3f(6.0,0.0,4.0);
        glVertex3f(0.0,0.0,4.0);
         glColor3d(0,1,1);
        glVertex3f(0.0,0.0,0.0);
        glVertex3f(0.0,0.0,4.0);
        glVertex3f(6.0,0.0,4.0);
        glVertex3f(6.0,0.0,0.0);




        glColor3d(0,1,0);
        glVertex3f(4.0,4.0,0.0);
        glVertex3f(4.0,4.0,4.0);
        glVertex3f(6.0,4.0,4.0);
        glVertex3f(6.0,4.0,0.0);
        glColor3d(0,1,0);
        glVertex3f(4.0,4.0,0.0);
        glVertex3f(6.0,4.0,0.0);
        glVertex3f(6.0,4.0,4.0);
        glVertex3f(4.0,4.0,4.0);




        glColor3d(1,1,1);
        glVertex3f(0.0,1.0,4.0);
        glVertex3f(0.0,1.0,0.0);
        glVertex3f(0.0,0.0,0.0);
        glVertex3f(0.0,0.0,4.0);
         glColor3d(1,1,1);
        glVertex3f(0.0,1.0,4.0);
        glVertex3f(0.0,0.0,4.0);
        glVertex3f(0.0,0.0,0.0);
        glVertex3f(0.0,1.0,0.0);



         glColor3d(1,0,1);
        glVertex3f(2.5,2.8,0.0);
        glVertex3f(0.0,1.0,0.0);
        glVertex3f(0.0,1.0,4.0);
        glVertex3f(2.5,2.8,4.0);

          glColor3d(1,0,1);
        glVertex3f(3.5,3.5,0.0);
        glVertex3f(3.5,3.5,4.0);
        glVertex3f(4.0,4.0,4.0);
        glVertex3f(4.0,4.0,0.0);


         glColor3d(1,1,0);
        glVertex3f(2.0,0.0,0.0);
        glVertex3f(4.0,0.0,0.0);
        glVertex3f(4.0,-1.0,0.0);
        glVertex3f(2.0,-1.0,0.0);

         glColor3d(1,1,0);
        glVertex3f(2.0,0.0,0.5);
        glVertex3f(2.0,-1.0,0.5);
        glVertex3f(4.0,-1.0,0.5);
        glVertex3f(4.0,0.0,0.5);

         glColor3d(1,1,0);
        glVertex3f(2.0,0.0,0.0);
        glVertex3f(2.0,-1.0,0.0);
        glVertex3f(2.0,-1.0,0.5);
        glVertex3f(2.0,0.0,0.5);

        glColor3d(1,1,0);
        glVertex3f(4.0,0.0,0.0);glVertex3f(4.0,0.0,0.5); glVertex3f(4.0,-1.0,0.5);
        glVertex3f(4.0,-1.0,0.0);



         glColor3d(1,1,0);
        glVertex3f(2.0,0.0,3.5);
        glVertex3f(4.0,0.0,3.5);
        glVertex3f(4.0,-1.0,3.5);
        glVertex3f(2.0,-1.0,3.5);

         glColor3d(1,1,0);
        glVertex3f(2.0,0.0,4.0);
        glVertex3f(2.0,-1.0,4.0);
        glVertex3f(4.0,-1.0,4.0);
        glVertex3f(4.0,0.0,4.0);

         glColor3d(1,0,0);
        glVertex3f(1.0,-1.0,0.0);
        glVertex3f(1.0,-1.0,1.0);
        glVertex3f(5.0,-1.0,1.0);
        glVertex3f(5.0,-1.0,0.0);

         glColor3d(1,0,0);
        glVertex3f(1.0,-1.0,0.0);
        glVertex3f(5.0,-1.0,0.0);
        glVertex3f(5.0,-1.0,1.0);
        glVertex3f(1.0,-1.0,1.0);

         glColor3d(1,0,0);
        glVertex3f(1.0,-1.0,4.0);
        glVertex3f(1.0,-1.0,3.0);
        glVertex3f(5.0,-1.0,3.0);
        glVertex3f(5.0,-1.0,4.0);

         glColor3d(1,0,0);
        glVertex3f(1.0,-1.0,4.0);
        glVertex3f(5.0,-1.0,4.0);
        glVertex3f(5.0,-1.0,3.0);
        glVertex3f(1.0,-1.0,3.0);

         glColor3d(1,1,0);
        glVertex3f(6.0,4.0,0.0);
        glVertex3f(6.0,4.0,4.0);
        glVertex3f(6.0,0.0,4.0);
        glVertex3f(6.0,0.0,0.0);
        glColor3d(1,1,0);
        glVertex3f(6.0,4.0,0.0);
        glVertex3f(6.0,0.0,0.0);
        glVertex3f(6.0,0.0,4.0);
        glVertex3f(6.0,4.0,4.0);



         glColor3d(1,0,1);
        glVertex3f(6.0,2.5,1.5);
        glVertex3f(10.0,2.5,1.5);
        glVertex3f(10.0,1.5,1.5);
        glVertex3f(6.0,1.5,1.5);

         glColor3d(1,0,1);
        glVertex3f(6.0,2.5,2.5);
        glVertex3f(6.0,1.5,2.5);
        glVertex3f(10.0,1.5,2.5);
        glVertex3f(10.0,2.5,2.5);

         glColor3d(1,0,1);
        glVertex3f(6.0,2.5,1.5);
        glVertex3f(6.0,2.5,2.5);
        glVertex3f(10.0,2.5,2.5);
        glVertex3f(10.0,2.5,1.5);


          glColor3d(1,0,1);
        glVertex3f(6.0,2.5,1.5);
        glVertex3f(10.0,2.5,1.5);
        glVertex3f(10.0,2.5,2.5);
        glVertex3f(6.0,2.5,2.5);

           glColor3d(1,0,1);
        glVertex3f(6.0,1.5,1.5);
        glVertex3f(10.0,1.5,1.5);
        glVertex3f(10.0,1.5,2.5);
        glVertex3f(6.0,1.5,2.5);

           glColor3d(1,0,1);
        glVertex3f(10.0,2.5,2.5);
        glVertex3f(10.0,1.5,2.5);
        glVertex3f(10.0,1.5,1.5);
        glVertex3f(10.0,2.5,1.5);








    glEnd();

     glBegin(GL_QUADS);

    glEnd();
    */
}

static void display(void)
{
    const double t = glutGet(GLUT_ELAPSED_TIME) / 1000.0;
    const double a = t*90.0;

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glColor3d(1,0,0);

    /* glPushMatrix();
         glTranslated(-2.4,1.2,-6);
         glRotated(60,1,0,0);
         glRotated(a,0,0,1);
         glutSolidSphere(1,slices,stacks);
     glPopMatrix();

     glPushMatrix();
         glTranslated(0,1.2,-6);
         glRotated(60,1,0,0);
         glRotated(a,0,0,1);
         glutSolidCone(1,1,slices,stacks);
     glPopMatrix();

     glPushMatrix();
         glTranslated(2.4,1.2,-6);
         glRotated(60,1,0,0);
         glRotated(a,0,0,1);
         glutSolidTorus(0.2,0.8,slices,stacks);
     glPopMatrix();

     glPushMatrix();
         glTranslated(-2.4,-1.2,-6);
         glRotated(60,1,0,0);
         glRotated(a,0,0,1);
         glutWireSphere(1,slices,stacks);
     glPopMatrix();

     glPushMatrix();
         glTranslated(0,-1.2,-6);
         glRotated(60,1,0,0);
         glRotated(a,0,0,1);
         glutWireCone(1,1,slices,stacks);
     glPopMatrix();

     glPushMatrix();
         glTranslated(2.4,-1.2,-6);
         glRotated(60,1,0,0);
         glRotated(a,0,0,1);
         glutWireTorus(0.2,0.8,slices,stacks);
     glPopMatrix();*/
//utiu
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt( eyex, eyey, eyez, centerx, centery, centerz, upx, upy,upz);

    glPushMatrix();
    glTranslated(l,r,f);
    glRotated(degree,1,0,0);
    glRotated(degree1,0,1,0);
    glRotated(degree2,0,0,1);
    glScalef(sc,sc,sc);

    helicopter();
    glPopMatrix();

    glutSwapBuffers();
}
void processSpecialKeys(int key, int xx, int yy)
{


    double x,r=8,h=1;

    int limit=160;



    switch (key)
    {
    case GLUT_KEY_LEFT :
        for(int i=limit; i>=0; i--)
            x = i*3.1416/180;
        centerx = cos(x);

        break;
    case GLUT_KEY_RIGHT :
        for(int i=limit; i>=0; i--)
            x = i*3.1416/180;
        centerz = cos(x);
        break;
    case 'F':
        for(int i=limit; i>=0; i--)
            x = i*3.1416/180;
        centery = cos(x);
        break;

    }
}

static void key(unsigned char key, int x, int y)
{
    switch (key)
    {
    case 'q':
        exit(0);
        break;
    case 'a':
        degree+=2.5;
        break;
    case 'b':
        degree-=2.5;
        break;
    case 'c':
        degree1+=2.5;
        break;
    case 'd':
        degree1-=2.5;
        break;
    case 'D':
        deg+=30.0;
        break;
    case 'e':
        degree2+=2.5;
        break;
    case 'f':
        degree2-=2.5;
        break;

    case '+':
        sc+=.1;
        break;
    case '-':
        sc-=.1;
        break;

    case 'g':
        l+=.1;
        deg+=30;
        break;
    case 'i':
        r+=.1;
        break;
    case 'k':
        f+=.1;
        break;
    case 'h':
        l-=.1;
        deg+=30;
        break;
    case 'j':
        r-=.1;
        break;
    case 'l':
        f-=0.1;
        break;
    case 'm':
        eyex+=.1;
        break;
    case 'n':
        eyey+=.1;
        break;
    case 'o':
        eyez+=.1;
        break;
    case 'p':
        centerx+=.1;
        break;
    case 'r':
        centery+=.1;
        break;
    case 's':
        centerz+=.1;
        break;
    case 't':
        upx+=.1;
        break;
    case 'u':
        upy+=.1;
        break;
    case 'v':
        upz+=.1;
        break;

    case 'M':
        eyex-=.1;
        break;
    case 'N':
        eyey-=.1;
        break;
    case 'O':
        eyez-=.1;
        break;
    case 'P':
        centerx-=.1;
        break;
    case 'R':
        centery-=.1;
        break;
    case 'S':
        centerz-=.1;
        break;
    case 'T':
        upx-=.1;
        break;
    case 'U':
        upy-=.1;
        break;
    case 'V':
        upz-=.1;
        break;
    case 'B':
        lim+=.1;
        centerx=cos(lim);

        upz=0;
        eyex=0;
        eyez=0;//centery=0;
        break;
    case 'C':
        lim+=.1;
        centery=cos(lim);
        upz=0;
        eyex=0;
        eyez=0;
        //centerx=0;
        break;
    case 'E':

        lim+=0.1;
        upz=20*cos(lim);
        centerx=0.1;
        eyex=0;
        eyez=0;

        break;
    case 'W':
        eyex=ra*cos(i);
        eyez=ra*sin(i);
        i+=0.04;
        //deg+=30.0;
        break;

    }
    glutPostRedisplay();
}

static void idle(void)
{
    glutPostRedisplay();
}

const GLfloat light_ambient[]  = { 0.0f, 0.0f, 0.0f, 1.0f };
const GLfloat light_diffuse[]  = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_position[] = { 2.0f, 5.0f, 5.0f, 0.0f };

const GLfloat mat_ambient[]    = { 0.7f, 0.7f, 0.7f, 1.0f };
const GLfloat mat_diffuse[]    = { 0.8f, 0.8f, 0.8f, 1.0f };
const GLfloat mat_specular[]   = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat high_shininess[] = { 100.0f };

/* Program entry point */

int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(640,480);
    glutInitWindowPosition(10,10);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);

    glutCreateWindow("GLUT Shapes");

    glutReshapeFunc(resize);
    glutDisplayFunc(display);
    glutKeyboardFunc(key);
    glutIdleFunc(idle);
    glutSpecialFunc(processSpecialKeys);
    glClearColor(1,1,1,1);
    glEnable(GL_CULL_FACE);
    glCullFace(GL_BACK);

    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LESS);

    glEnable(GL_LIGHT0);
    glEnable(GL_NORMALIZE);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_LIGHTING);

    glLightfv(GL_LIGHT0, GL_AMBIENT,  light_ambient);
    glLightfv(GL_LIGHT0, GL_DIFFUSE,  light_diffuse);
    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
    glLightfv(GL_LIGHT0, GL_POSITION, light_position);

    glMaterialfv(GL_FRONT, GL_AMBIENT,   mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE,   mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR,  mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, high_shininess);

    glutMainLoop();

    return EXIT_SUCCESS;
}
