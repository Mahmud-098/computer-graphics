/*
 * GLUT Shapes Demo
 *
 * Written by Nigel Stewart November 2003
 *
 * This program is test harness for the sphere, cone
 * and torus shapes in GLUT.
 *
 * Spinning wireframe and smooth shaded shapes are
 * displayed until the ESC or q key is pressed.  The
 * number of geometry stacks and slices can be adjusted
 * using the + and - keys.
 */
#include <windows.h>
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <stdlib.h>
#include <bits/stdc++.h>

using namespace std;

static int slices = 16;
static int stacks = 16;
float degree_x = 0;
float degree_y = 0;
float degree_z = 0;

/* GLUT callback Handlers */
#define PI 3.14159265

static void resize(int width, int height)
{
    const float ar = (float) width / (float) height;

    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glFrustum(-ar, ar, -1.0, 1.0, 2.0, 100.0);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity() ;
}
void part1()
{
    glBegin(GL_QUADS);
        glVertex3f(0.0,1.0,0.0);
        glVertex3f(1.0,1.0,1.0);
        glVertex3f(1.0,0.0,1.0);
        glVertex3f(1.0,0.0,0.0);

        glVertex3f(0.0,1.0,0.0);
        glVertex3f(0.0,1.0,1.0);
        glVertex3f(1.0,1.0,1.0);
        glVertex3f(1.0,1.0,0.0);

        glVertex3f(0.0,1.0,0.0);
        glVertex3f(1.0,1.0,0.0);
        glVertex3f(1.0,0.0,0.0);
        glVertex3f(0.0,0.0,0.0);

        glVertex3f(0.0,0.0,0.0);
        glVertex3f(1.0,0.0,0.0);
        glVertex3f(1.0,0.0,1.0);
        glVertex3f(0.0,0.0,1.0);

        glVertex3f(0.0,0.0,0.0);
        glVertex3f(0.0,0.0,1.0);
        glVertex3f(0.0,1.0,1.0);
        glVertex3f(0.0,1.0,0.0);

        glVertex3f(0.0,0.0,1.0);
        glVertex3f(1.0,0.0,1.0);
        glVertex3f(1.0,1.0,1.0);
        glVertex3f(0.0,1.0,1.0);

    glEnd();

}
void part2()
{
    glBegin(GL_POLYGON);
    glColor3f(0,1,0);
    glVertex3f(0.0,.13,0.2);
    glVertex3f(2.0,.13,0.2);
    glVertex3f(2.0,1.0,0.2);
    glVertex3f(1.5,1.0,0.2);
    glVertex3f(0,0.17,0.2);
    glEnd();
}
void helicopter()
{
    glPushMatrix();
    glScaled(3,0.08,0.7);
    glColor3f(1,0,0);
    part1();
    glPopMatrix();
    glPushMatrix();
    glTranslated(1,0.1,0.2);
    glScaled(.8,.5,.2);
    glColor3f(1,0,1);
    part1();
    glPopMatrix();

    glPushMatrix();
    glTranslated(0,0,-2);
    glScaled(3,0.08,0.7);
    glColor3f(1,0,0);
    part1();
    glPopMatrix();
    glPushMatrix();
    glTranslated(1,0.1,-1.8);
    glScaled(.8,.5,.2);
    glColor3f(1,0,1);
    part1();
    glPopMatrix();

    glPushMatrix();
    part2();
    glPopMatrix();
}
static void display(void)
{
    const double t = glutGet(GLUT_ELAPSED_TIME) / 1000.0;
    const double a = t*90.0;

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glColor3d(1,0,0);

    glPushMatrix();
        glTranslated(2,-3,-12);
        glRotated(degree_x,1,0,0);
        glRotated(degree_y,0,1,0);
        glRotated(degree_z,0,0,1);
        helicopter();
    glPopMatrix();
    glutSwapBuffers();
}


static void key(unsigned char key, int x, int y)
{
    switch (key)
    {
        case 27 :
        case 'q':
            exit(0);
            break;

        case 'm':
            degree_x+=1;
            break;

        case 'n':
            degree_x-=1;
            break;

        case 'k':
            degree_y+=1;
            break;

        case 'l':
            degree_y-=1;
            break;

        case 'y':
            degree_z+=1;
            break;

        case 'z':
            degree_z+=1;
            break;

        case '+':
            slices++;
            stacks++;
            break;

        case '-':
            if (slices>3 && stacks>3)
            {
                slices--;
                stacks--;
            }
            break;
    }

    glutPostRedisplay();
}

static void idle(void)
{
    glutPostRedisplay();
}

const GLfloat light_ambient[]  = { 0.0f, 0.0f, 0.0f, 1.0f };
const GLfloat light_diffuse[]  = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_position[] = { 2.0f, 5.0f, 5.0f, 0.0f };

const GLfloat mat_ambient[]    = { 0.7f, 0.7f, 0.7f, 1.0f };
const GLfloat mat_diffuse[]    = { 0.8f, 0.8f, 0.8f, 1.0f };
const GLfloat mat_specular[]   = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat high_shininess[] = { 100.0f };

/* Program entry point */

int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitWindowSize(640,480);
    glutInitWindowPosition(10,10);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);

    glutCreateWindow("Helicopter B2");

    glutReshapeFunc(resize);
    glutDisplayFunc(display);
    glutKeyboardFunc(key);
    glutIdleFunc(idle);

    glClearColor(1,1,1,1);
    glEnable(GL_CULL_FACE);
    glCullFace(GL_BACK);

    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LESS);

    glutMainLoop();

    return EXIT_SUCCESS;
}
